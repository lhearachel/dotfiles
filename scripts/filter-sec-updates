#!/usr/bin/env python3

# Simple script to assess the state of security updates for a given week.

"""
To use this script, you must have a Github Personal Access Token (PAT) which
has access to, at minimum:
  - the Elastic organization
  - all repositories owned by the organization
  - Read permission for organization members
  - Read permission for repository issues

This token should be provided to the script by the `GITHUB_TOKEN` env-var.
"""

from collections import defaultdict
from operator import itemgetter
from urllib import error, request, parse

import json
import os
import re
import sys


ANSI_RED = "\033[0;31m"
ANSI_YELLOW = "\033[1;33m"
ANSI_CLEAR = "\033[0m"


def try_join(val: str | list[str], delim: str = ",") -> str:
    if isinstance(val, str):
        return val
    else:
        return delim.join(val)


# Be helpful if the user does not specify the necessary Github token
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN", "")
if not GITHUB_TOKEN:
    print(
        f"❌ {ANSI_RED}Environment variable {ANSI_YELLOW}`GITHUB_TOKEN` {ANSI_RED}is either missing or empty.{ANSI_CLEAR}"
    )
    print(__doc__)
    sys.exit(1)

ORGANIZATION = "elastic"
REPOSITORY = "search-developer-productivity"
PARAMS = {
    "state": "open",
    "labels": ",".join(["qualys-report-items"]),
}

REQUEST = request.Request(
    f"https://api.github.com/repos/{ORGANIZATION}/{REPOSITORY}/issues?{parse.urlencode(PARAMS)}",
    headers={
        "Accept": "application/vnd.github+json",
        "Authorization": f"Bearer {GITHUB_TOKEN}",
        "X-GitHub-Api-Version": "2022-11-28",
    },
)

issues = []
try:
    with request.urlopen(REQUEST) as response:
        issues = json.loads(response.read().decode("utf-8"))
except error.HTTPError as e:
    print(
        f"❌ {ANSI_RED}GitHub Issues API responded with {ANSI_YELLOW}HTTP Error {e.code}{ANSI_RED}; does your token have the right permissions?{ANSI_CLEAR}"
    )
    sys.exit(1)

TITLE_PATTERN = re.compile(
    r"Qualys: (?P<opsys>[\w ]+) Security Update for (?P<package>\w+)"
)
BODY_PATTERN_VERSION = re.compile(r"\| \w[\w\-.]+ \| (?P<version>[\w\-.]+) \|\n")
BODY_PATTERN_HOSTS = re.compile(
    r"\* `(?P<hostname>[\w\-]+\.dal(10|12|13))\.swiftype\.net`\n"
)

UPDATE_TARGETS = defaultdict(lambda: defaultdict(dict))
UPDATE_TARGETS_BY_HOST = defaultdict(lambda: defaultdict(dict))
for issue in issues:
    if title_match := TITLE_PATTERN.match(issue["title"]):
        opsys = title_match.group("opsys")
        package = title_match.group("package")
        version_match = re.search(BODY_PATTERN_VERSION, issue["body"])
        version = version_match.group("version") if version_match else None
        hosts = re.findall(BODY_PATTERN_HOSTS, issue["body"])

        if UPDATE_TARGETS[opsys][package].get("version", "0.0.0") <= version:
            UPDATE_TARGETS[opsys][package]["version"] = version
            UPDATE_TARGETS[opsys][package]["hosts"] = []
            for host in hosts:
                UPDATE_TARGETS[opsys][package]["hosts"].append(host[0])
                UPDATE_TARGETS_BY_HOST[opsys][host[0]][package] = version

NUM_TARGETS_BY_OPSYS = {
    opsys: len(targets) for opsys, targets in UPDATE_TARGETS.items()
}

for opsys, num_targets in NUM_TARGETS_BY_OPSYS.items():
    candidates = sorted(
        [
            (host, len(package_versions))
            for host, package_versions in UPDATE_TARGETS_BY_HOST[opsys].items()
        ],
        key=itemgetter(1),
        reverse=True,
    )
    best = filter(lambda c: c[1] == candidates[0][1], candidates)
    print(f"Upgrades for {opsys}")
    print(f"-------------{'-' * len(opsys)}")
    print("Package Versions:")
    for package, details in UPDATE_TARGETS[opsys].items():
        print(f"  - {package} => {details['version']}")
    print()
    print(f"Total Available Upgrades: {num_targets}")
    print()
    print("Best Candidates:")
    for host, num_mentions in best:
        print(f"  - {host} => {num_mentions}")
    print()
